"""
Factory Acceptance Test 03: External Dependency Test

This test validates the autonomous platform's ability to integrate
third-party libraries and handle external dependencies correctly.

Test Implementation: QR Code Generator Service
- Flask API for QR code generation
- External dependency: qrcode library
- Image processing with Pillow
- Base64 encoding for response
"""
import subprocess
import sys
import time
from pathlib import Path

import requests

sys.path.insert(0, str(Path(__file__).parent))
from .fat_framework import FactoryAcceptanceTest


def generate_qr_code_service(test_case):
    """Generate a QR code generator service with external dependencies"""
    print('   [CODE] Generating QR code generator service with external dependencies...')
    base_dir = Path('apps/qr-generator-fat')
    base_dir.mkdir(parents=True, exist_ok=True)
    backend_code = '#!/usr/bin/env python3\n"""\nQR Code Generator Service - Generated by Hive Autonomous AI Agents\nExternal Dependency Factory Acceptance Test implementation\n"""\n\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport qrcode\nfrom PIL import Image\nimport io\nimport base64\nimport os\nfrom datetime import datetime\n\napp = Flask(__name__)\nCORS(app)\n\n# Configuration\nDEFAULT_SIZE = 10\nDEFAULT_BORDER = 4\nDEFAULT_FILL_COLOR = "black"\nDEFAULT_BACK_COLOR = "white"\n\ndef generate_qr_code(data, size=DEFAULT_SIZE, border=DEFAULT_BORDER,\n                     fill_color=DEFAULT_FILL_COLOR, back_color=DEFAULT_BACK_COLOR):\n    """Generate QR code and return as base64 encoded string"""\n\n    # Create QR code instance\n    qr = qrcode.QRCode(\n        version=1,  # Controls size of QR code\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=size,\n        border=border,\n    )\n\n    # Add data\n    qr.add_data(data)\n    qr.make(fit=True)\n\n    # Create image\n    img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n    # Convert to base64\n    buffer = io.BytesIO()\n    img.save(buffer, format=\'PNG\')\n    buffer.seek(0)\n\n    img_base64 = base64.b64encode(buffer.getvalue()).decode(\'utf-8\')\n\n    return img_base64\n\n@app.route(\'/api/health\', methods=[\'GET\'])\ndef health_check():\n    """Health check endpoint"""\n    return jsonify({\n        "status": "healthy",\n        "service": "qr-generator",\n        "version": "1.0.0",\n        "generated_by": "hive_autonomous_agents",\n        "test_type": "external_dependency_fat",\n        "dependencies": {\n            "qrcode": "installed",\n            "Pillow": "installed",\n            "flask": "installed",\n            "flask-cors": "installed"\n        }\n    })\n\n@app.route(\'/api/generate\', methods=[\'POST\'])\ndef generate_qr():\n    """Generate QR code from provided data"""\n    try:\n        data = request.get_json()\n\n        if not data or \'text\' not in data:\n            return jsonify({\n                "success": False,\n                "error": "Text parameter is required"\n            }), 400\n\n        text = data[\'text\']\n        size = data.get(\'size\', DEFAULT_SIZE)\n        border = data.get(\'border\', DEFAULT_BORDER)\n        fill_color = data.get(\'fill_color\', DEFAULT_FILL_COLOR)\n        back_color = data.get(\'back_color\', DEFAULT_BACK_COLOR)\n\n        # Generate QR code\n        qr_base64 = generate_qr_code(text, size, border, fill_color, back_color)\n\n        return jsonify({\n            "success": True,\n            "qr_code": qr_base64,\n            "format": "png",\n            "encoding": "base64",\n            "text": text,\n            "generated_at": datetime.now().isoformat()\n        })\n\n    except Exception as e:\n        return jsonify({\n            "success": False,\n            "error": f"QR generation failed: {str(e)}"\n        }), 500\n\n@app.route(\'/api/batch\', methods=[\'POST\'])\ndef generate_batch():\n    """Generate multiple QR codes in batch"""\n    try:\n        data = request.get_json()\n\n        if not data or \'items\' not in data:\n            return jsonify({\n                "success": False,\n                "error": "Items array is required"\n            }), 400\n\n        items = data[\'items\']\n        if not isinstance(items, list) or len(items) == 0:\n            return jsonify({\n                "success": False,\n                "error": "Items must be a non-empty array"\n            }), 400\n\n        results = []\n\n        for item in items:\n            if isinstance(item, str):\n                text = item\n            elif isinstance(item, dict) and \'text\' in item:\n                text = item[\'text\']\n            else:\n                continue\n\n            qr_base64 = generate_qr_code(text)\n            results.append({\n                "text": text,\n                "qr_code": qr_base64\n            })\n\n        return jsonify({\n            "success": True,\n            "count": len(results),\n            "results": results,\n            "generated_at": datetime.now().isoformat()\n        })\n\n    except Exception as e:\n        return jsonify({\n            "success": False,\n            "error": f"Batch generation failed: {str(e)}"\n        }), 500\n\n@app.route(\'/api/validate\', methods=[\'POST\'])\ndef validate_dependencies():\n    """Validate that all external dependencies are properly installed"""\n    dependencies = {}\n\n    try:\n        import qrcode\n        dependencies[\'qrcode\'] = {\n            "installed": True,\n            "version": getattr(qrcode, \'__version__\', \'unknown\')\n        }\n    except ImportError:\n        dependencies[\'qrcode\'] = {"installed": False}\n\n    try:\n        import PIL\n        dependencies[\'Pillow\'] = {\n            "installed": True,\n            "version": PIL.__version__\n        }\n    except ImportError:\n        dependencies[\'Pillow\'] = {"installed": False}\n\n    try:\n        import flask\n        dependencies[\'flask\'] = {\n            "installed": True,\n            "version": flask.__version__\n        }\n    except ImportError:\n        dependencies[\'flask\'] = {"installed": False}\n\n    try:\n        import flask_cors\n        dependencies[\'flask_cors\'] = {\n            "installed": True,\n            "version": getattr(flask_cors, \'__version__\', \'unknown\')\n        }\n    except ImportError:\n        dependencies[\'flask_cors\'] = {"installed": False}\n\n    all_installed = all(dep.get(\'installed\', False) for dep in dependencies.values())\n\n    return jsonify({\n        "success": all_installed,\n        "dependencies": dependencies,\n        "test_type": "external_dependency_fat"\n    })\n\n@app.route(\'/\', methods=[\'GET\'])\ndef index():\n    """Simple UI for testing"""\n    html_content = """<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator - External Dependency FAT</title>\n    <style>\n        body { font-family: Arial; max-width: 600px; margin: 50px auto; padding: 20px; }\n        input { width: 100%; padding: 10px; margin: 10px 0; }\n        button { background: #007bff; color: white; padding: 10px 20px; border: none; cursor: pointer; }\n        button:hover { background: #0056b3; }\n        #result { margin-top: 20px; text-align: center; }\n        img { max-width: 300px; margin: 20px 0; }\n        .badge { background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; }\n    </style>\n</head>\n<body>\n    <h1>QR Code Generator <span class="badge">External Dependency FAT</span></h1>\n    <p>This service demonstrates external dependency integration (qrcode, Pillow)</p>\n\n    <input type="text" id="textInput" placeholder="Enter text for QR code" />\n    <button onclick="generateQR()">Generate QR Code</button>\n\n    <div id="result"></div>\n\n    <script>\n        async function generateQR() {\n            const text = document.getElementById(\'textInput\').value;\n            if (!text) {\n                alert(\'Please enter some text\');\n                return;\n            }\n\n            try {\n                const response = await fetch(\'/api/generate\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ text: text })\n                });\n\n                const data = await response.json();\n\n                if (data.success) {\n                    document.getElementById(\'result\').innerHTML =\n                        \'<h3>Generated QR Code:</h3>\' +\n                        \'<img src="data:image/png;base64,\' + data.qr_code + \'" />\' +\n                        \'<p>Text: \' + data.text + \'</p>\';\n                } else {\n                    alert(\'Error: \' + data.error);\n                }\n            } catch (error) {\n                alert(\'Failed to generate QR code: \' + error.message);\n            }\n        }\n    </script>\n</body>\n</html>"""\n    return html_content\n\nif __name__ == \'__main__\':\n    print("Starting QR Code Generator Service on port 5004...")\n    print("External dependencies: qrcode, Pillow")\n    app.run(host=\'0.0.0.0\', port=5004, debug=False)\n'
    with open(base_dir / 'app.py', 'w') as f:
        f.write(backend_code)
    requirements = 'Flask==2.3.3\nFlask-CORS==4.0.0\nqrcode==7.4.2\nPillow==10.1.0\n'
    with open(base_dir / 'requirements.txt', 'w') as f:
        f.write(requirements)
    test_code = '#!/usr/bin/env python3\n"""\nTest suite for QR Code Generator Service\nTests external dependency integration and functionality\n"""\n\nimport unittest\nimport requests\nimport json\nimport base64\nfrom io import BytesIO\nfrom PIL import Image\n\nclass TestQRGenerator(unittest.TestCase):\n    """Test QR code generator functionality"""\n\n    BASE_URL = "http://localhost:5004"\n\n    def test_health_check(self):\n        """Test health check endpoint"""\n        response = requests.get(f"{self.BASE_URL}/api/health")\n        self.assertEqual(response.status_code, 200)\n\n        data = response.json()\n        self.assertEqual(data["status"], "healthy")\n        self.assertEqual(data["service"], "qr-generator")\n        self.assertEqual(data["test_type"], "external_dependency_fat")\n\n        # Check dependencies reported as installed\n        deps = data.get("dependencies", {})\n        self.assertTrue(deps.get("qrcode") == "installed")\n        self.assertTrue(deps.get("Pillow") == "installed")\n\n    def test_generate_qr_code(self):\n        """Test single QR code generation"""\n        test_text = "Hello from FAT test"\n\n        response = requests.post(\n            f"{self.BASE_URL}/api/generate",\n            json={"text": test_text},\n            headers={"Content-Type": "application/json"}\n        )\n\n        self.assertEqual(response.status_code, 200)\n\n        data = response.json()\n        self.assertTrue(data["success"])\n        self.assertIn("qr_code", data)\n        self.assertEqual(data["format"], "png")\n        self.assertEqual(data["encoding"], "base64")\n        self.assertEqual(data["text"], test_text)\n\n        # Validate base64 encoded image\n        try:\n            img_data = base64.b64decode(data["qr_code"])\n            img = Image.open(BytesIO(img_data))\n            self.assertEqual(img.format, "PNG")\n        except Exception as e:\n            self.fail(f"Invalid QR code image: {e}")\n\n    def test_generate_with_options(self):\n        """Test QR generation with custom options"""\n        response = requests.post(\n            f"{self.BASE_URL}/api/generate",\n            json={\n                "text": "Custom QR",\n                "size": 15,\n                "border": 2,\n                "fill_color": "blue",\n                "back_color": "yellow"\n            },\n            headers={"Content-Type": "application/json"}\n        )\n\n        self.assertEqual(response.status_code, 200)\n\n        data = response.json()\n        self.assertTrue(data["success"])\n        self.assertIn("qr_code", data)\n\n    def test_batch_generation(self):\n        """Test batch QR code generation"""\n        items = ["Item 1", "Item 2", "Item 3"]\n\n        response = requests.post(\n            f"{self.BASE_URL}/api/batch",\n            json={"items": items},\n            headers={"Content-Type": "application/json"}\n        )\n\n        self.assertEqual(response.status_code, 200)\n\n        data = response.json()\n        self.assertTrue(data["success"])\n        self.assertEqual(data["count"], 3)\n        self.assertEqual(len(data["results"]), 3)\n\n        # Validate each result\n        for i, result in enumerate(data["results"]):\n            self.assertEqual(result["text"], items[i])\n            self.assertIn("qr_code", result)\n\n    def test_missing_text_parameter(self):\n        """Test error handling for missing text"""\n        response = requests.post(\n            f"{self.BASE_URL}/api/generate",\n            json={},\n            headers={"Content-Type": "application/json"}\n        )\n\n        self.assertEqual(response.status_code, 400)\n\n        data = response.json()\n        self.assertFalse(data["success"])\n        self.assertIn("error", data)\n\n    def test_validate_dependencies(self):\n        """Test dependency validation endpoint"""\n        response = requests.post(f"{self.BASE_URL}/api/validate")\n        self.assertEqual(response.status_code, 200)\n\n        data = response.json()\n        self.assertTrue(data["success"])\n\n        # Check all required dependencies are installed\n        deps = data["dependencies"]\n        self.assertTrue(deps["qrcode"]["installed"])\n        self.assertTrue(deps["Pillow"]["installed"])\n        self.assertTrue(deps["flask"]["installed"])\n        self.assertTrue(deps["flask_cors"]["installed"])\n\nif __name__ == \'__main__\':\n    unittest.main(verbosity=2)\n'
    with open(base_dir / 'test_qr_generator.py', 'w') as f:
        f.write(test_code)
    readme = "# QR Code Generator Service - External Dependency FAT\n\nThis service demonstrates the platform's ability to integrate external dependencies\nand third-party libraries in generated applications.\n\n## External Dependencies\n\n- **qrcode**: Python QR Code generation library\n- **Pillow**: Python Imaging Library for image processing\n- **Flask**: Web framework\n- **Flask-CORS**: CORS support for Flask\n\n## API Endpoints\n\n- `GET /api/health` - Health check with dependency status\n- `POST /api/generate` - Generate single QR code\n- `POST /api/batch` - Generate multiple QR codes\n- `POST /api/validate` - Validate dependency installation\n- `GET /` - Simple web UI for testing\n\n## Usage\n\n1. Install dependencies: `pip install -r requirements.txt`\n2. Start the service: `python app.py`\n3. Open browser to: `http://localhost:5004`\n\n## Testing\n\nRun tests with: `python test_qr_generator.py`\n\n## Generated by Hive Autonomous AI Agents\n\nThis service was generated as part of the Factory Acceptance Test to validate\nthe platform's ability to handle external dependencies and third-party integrations.\n"
    with open(base_dir / 'README.md', 'w') as f:
        f.write(readme)
    print('   [OK] Generated QR code generator service with external dependencies')
    print('       - Flask API with QR code generation endpoints')
    print('       - External dependencies: qrcode, Pillow')
    print('       - Base64 image encoding')
    print('       - Batch processing capability')
    print('       - Dependency validation endpoint')
    return True

def validate_qr_generator(test_case):
    """Validate the QR code generator service"""
    app_dir = Path('apps/qr-generator-fat')
    if not app_dir.exists():
        return {'success': False, 'error': 'Application directory not found'}
    required_files = ['app.py', 'requirements.txt', 'test_qr_generator.py', 'README.md']
    for file_path in required_files:
        if not (app_dir / file_path).exists():
            return {'success': False, 'error': f'Missing file: {file_path}'}
    try:
        print('   Installing external dependencies (qrcode, Pillow)...')
        install_result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], cwd=app_dir, capture_output=True, text=True, timeout=120)
        if install_result.returncode != 0:
            return {'success': False, 'error': f'Dependencies installation failed: {install_result.stderr}'}
        server_process = subprocess.Popen([sys.executable, 'app.py'], cwd=app_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        time.sleep(3)
        try:
            health_response = requests.get('http://localhost:5004/api/health', timeout=5)
            if health_response.status_code != 200:
                server_process.terminate()
                return {'success': False, 'error': f'Health check failed: {health_response.status_code}'}
            health_data = health_response.json()
            if health_data.get('test_type') != 'external_dependency_fat':
                server_process.terminate()
                return {'success': False, 'error': 'Invalid test type in health check'}
            validate_response = requests.post('http://localhost:5004/api/validate', timeout=5)
            if validate_response.status_code != 200:
                server_process.terminate()
                return {'success': False, 'error': f'Dependency validation failed: {validate_response.status_code}'}
            validate_data = validate_response.json()
            if not validate_data.get('success'):
                server_process.terminate()
                return {'success': False, 'error': 'External dependencies not properly installed'}
            qr_response = requests.post('http://localhost:5004/api/generate', json={'text': 'FAT Test Validation'}, headers={'Content-Type': 'application/json'}, timeout=5)
            if qr_response.status_code != 200:
                server_process.terminate()
                return {'success': False, 'error': f'QR generation failed: {qr_response.status_code}'}
            qr_data = qr_response.json()
            if not qr_data.get('success'):
                server_process.terminate()
                return {'success': False, 'error': 'QR generation did not succeed'}
            if not qr_data.get('qr_code'):
                server_process.terminate()
                return {'success': False, 'error': 'No QR code data returned'}
            batch_response = requests.post('http://localhost:5004/api/batch', json={'items': ['Test1', 'Test2', 'Test3']}, headers={'Content-Type': 'application/json'}, timeout=5)
            if batch_response.status_code != 200:
                server_process.terminate()
                return {'success': False, 'error': f'Batch generation failed: {batch_response.status_code}'}
            batch_data = batch_response.json()
            if batch_data.get('count') != 3:
                server_process.terminate()
                return {'success': False, 'error': 'Batch generation count mismatch'}
            test_result = subprocess.run([sys.executable, 'test_qr_generator.py'], cwd=app_dir, capture_output=True, text=True, timeout=60)
            server_process.terminate()
            server_process.wait(timeout=5)
            if test_result.returncode != 0:
                return {'success': False, 'error': f'Test suite failed: {test_result.stderr}'}
            if 'FAILED' in test_result.stderr or 'ERROR' in test_result.stderr:
                return {'success': False, 'error': f'Some tests failed: {test_result.stderr}'}
            return {'success': True, 'details': 'QR generator service validated successfully with external dependencies (qrcode, Pillow) properly integrated'}
        except requests.RequestException as e:
            server_process.terminate()
            return {'success': False, 'error': f'Request failed: {str(e)}'}
    except subprocess.TimeoutExpired:
        return {'success': False, 'error': 'Operation timeout'}
    except Exception as e:
        return {'success': False, 'error': f'Validation error: {str(e)}'}

def run_external_dependency_test():
    """Execute the External Dependency Test"""
    test_case = {'name': 'External Dependency Test', 'title': 'FAT-03: QR Code Generator with External Dependencies', 'description': 'Generate service using third-party libraries (qrcode, Pillow)', 'goal': "Validate autonomous platform's ability to integrate external dependencies", 'complexity': 'MEDIUM', 'priority': 7, 'estimated_duration': 900, 'task_data': {'project_name': 'qr-generator-fat', 'description': 'QR code generator service with external library dependencies', 'requirements': {'framework': 'Flask', 'external_dependencies': ['qrcode', 'Pillow'], 'endpoints': ['POST /api/generate - Generate single QR code', 'POST /api/batch - Generate multiple QR codes', 'POST /api/validate - Validate dependencies'], 'features': ['Base64 image encoding', 'Custom QR code options', 'Batch processing', 'Dependency validation']}}, 'metadata': {'test_type': 'factory_acceptance', 'test_id': 'FAT-03', 'complexity_level': 'external_dependency', 'autonomous_generation': True}, 'generator_function': generate_qr_code_service, 'validator_function': validate_qr_generator}
    fat = FactoryAcceptanceTest()
    result = fat.run_test_case(test_case)
    return result
if __name__ == '__main__':
    result = run_external_dependency_test()
    if result['success']:
        print('\n[SUCCESS] External Dependency Test completed successfully!')
        exit(0)
    else:
        print(f"\n[FAILURE] External Dependency Test failed: {result['error']}")
        exit(1)
