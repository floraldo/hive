#!/usr/bin/env python3
"""Calculator Service - Generated by Hive Autonomous AI Agents
Failure and Rework Factory Acceptance Test
Iteration 3: Fully fixed and production ready
"""

import math

from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)


@app.route("/api/health", methods=["GET"])
def health_check():
    return jsonify(
        {
            "status": "healthy",
            "service": "calculator",
            "version": "2.0.0",
            "iteration": 3,
            "generated_by": "hive_autonomous_agents",
            "test_type": "failure_rework_fat",
            "deployment_status": "production_ready",
            "improvements": [
                "Fixed addition operation",
                "Fixed multiplication operation",
                "Added zero division protection",
                "Enhanced error handling",
                "Added input validation",
            ],
        },
    )


@app.route("/api/add", methods=["POST"])
def add():
    try:
        data = request.get_json()
        if "a" not in data or "b" not in data:
            return jsonify({"success": False, "error": "Missing parameters a or b"}), 400

        a = float(data["a"])
        b = float(data["b"])
        result = a + b
        return jsonify({"success": True, "result": result, "operation": "add"})
    except ValueError:
        return jsonify({"success": False, "error": "Invalid numeric input"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/subtract", methods=["POST"])
def subtract():
    try:
        data = request.get_json()
        if "a" not in data or "b" not in data:
            return jsonify({"success": False, "error": "Missing parameters a or b"}), 400

        a = float(data["a"])
        b = float(data["b"])
        result = a - b
        return jsonify({"success": True, "result": result, "operation": "subtract"})
    except ValueError:
        return jsonify({"success": False, "error": "Invalid numeric input"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/multiply", methods=["POST"])
def multiply():
    try:
        data = request.get_json()
        if "a" not in data or "b" not in data:
            return jsonify({"success": False, "error": "Missing parameters a or b"}), 400

        a = float(data["a"])
        b = float(data["b"])
        result = a * b
        return jsonify({"success": True, "result": result, "operation": "multiply"})
    except ValueError:
        return jsonify({"success": False, "error": "Invalid numeric input"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/divide", methods=["POST"])
def divide():
    try:
        data = request.get_json()
        if "a" not in data or "b" not in data:
            return jsonify({"success": False, "error": "Missing parameters a or b"}), 400

        a = float(data["a"])
        b = float(data["b"])

        # FIXED: Zero division protection
        if b == 0:
            return jsonify({"success": False, "error": "Division by zero"}), 400

        result = a / b
        return jsonify({"success": True, "result": result, "operation": "divide"})
    except ValueError:
        return jsonify({"success": False, "error": "Invalid numeric input"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/api/power", methods=["POST"])
def power():
    """Bonus feature: Added in final iteration"""
    try:
        data = request.get_json()
        if "base" not in data or "exponent" not in data:
            return jsonify({"success": False, "error": "Missing parameters base or exponent"}), 400

        base = float(data["base"])
        exponent = float(data["exponent"])
        result = math.pow(base, exponent)
        return jsonify({"success": True, "result": result, "operation": "power"})
    except ValueError:
        return jsonify({"success": False, "error": "Invalid numeric input"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


if __name__ == "__main__":
    print("Starting Calculator Service on port 5005 (iteration 3 - production ready)...")
    app.run(host="0.0.0.0", port=5005, debug=False)
