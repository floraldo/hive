#!/usr/bin/env python3
"""
Factory Acceptance Test 03: External Dependency Test

This test validates the autonomous platform's ability to integrate
third-party libraries and handle external dependencies correctly.

Test Implementation: QR Code Generator Service
- Flask API for QR code generation
- External dependency: qrcode library
- Image processing with Pillow
- Base64 encoding for response
"""

import json
import subprocess
import time
import requests
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Any
import traceback
import base64

# Import the FAT framework
sys.path.insert(0, str(Path(__file__).parent))
from fat_framework import FactoryAcceptanceTest


def generate_qr_code_service(test_case):
    """Generate a QR code generator service with external dependencies"""

    print("   [CODE] Generating QR code generator service with external dependencies...")

    # Create package structure
    base_dir = Path("apps/qr-generator-fat")
    base_dir.mkdir(parents=True, exist_ok=True)

    # Generate Flask backend with QR code generation
    backend_code = '''#!/usr/bin/env python3
"""
QR Code Generator Service - Generated by Hive Autonomous AI Agents
External Dependency Factory Acceptance Test implementation
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import qrcode
from PIL import Image
import io
import base64
import os
from datetime import datetime

app = Flask(__name__)
CORS(app)

# Configuration
DEFAULT_SIZE = 10
DEFAULT_BORDER = 4
DEFAULT_FILL_COLOR = "black"
DEFAULT_BACK_COLOR = "white"

def generate_qr_code(data, size=DEFAULT_SIZE, border=DEFAULT_BORDER,
                     fill_color=DEFAULT_FILL_COLOR, back_color=DEFAULT_BACK_COLOR):
    """Generate QR code and return as base64 encoded string"""

    # Create QR code instance
    qr = qrcode.QRCode(
        version=1,  # Controls size of QR code
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=size,
        border=border,
    )

    # Add data
    qr.add_data(data)
    qr.make(fit=True)

    # Create image
    img = qr.make_image(fill_color=fill_color, back_color=back_color)

    # Convert to base64
    buffer = io.BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)

    img_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')

    return img_base64

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "service": "qr-generator",
        "version": "1.0.0",
        "generated_by": "hive_autonomous_agents",
        "test_type": "external_dependency_fat",
        "dependencies": {
            "qrcode": "installed",
            "Pillow": "installed",
            "flask": "installed",
            "flask-cors": "installed"
        }
    })

@app.route('/api/generate', methods=['POST'])
def generate_qr():
    """Generate QR code from provided data"""
    try:
        data = request.get_json()

        if not data or 'text' not in data:
            return jsonify({
                "success": False,
                "error": "Text parameter is required"
            }), 400

        text = data['text']
        size = data.get('size', DEFAULT_SIZE)
        border = data.get('border', DEFAULT_BORDER)
        fill_color = data.get('fill_color', DEFAULT_FILL_COLOR)
        back_color = data.get('back_color', DEFAULT_BACK_COLOR)

        # Generate QR code
        qr_base64 = generate_qr_code(text, size, border, fill_color, back_color)

        return jsonify({
            "success": True,
            "qr_code": qr_base64,
            "format": "png",
            "encoding": "base64",
            "text": text,
            "generated_at": datetime.now().isoformat()
        })

    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"QR generation failed: {str(e)}"
        }), 500

@app.route('/api/batch', methods=['POST'])
def generate_batch():
    """Generate multiple QR codes in batch"""
    try:
        data = request.get_json()

        if not data or 'items' not in data:
            return jsonify({
                "success": False,
                "error": "Items array is required"
            }), 400

        items = data['items']
        if not isinstance(items, list) or len(items) == 0:
            return jsonify({
                "success": False,
                "error": "Items must be a non-empty array"
            }), 400

        results = []

        for item in items:
            if isinstance(item, str):
                text = item
            elif isinstance(item, dict) and 'text' in item:
                text = item['text']
            else:
                continue

            qr_base64 = generate_qr_code(text)
            results.append({
                "text": text,
                "qr_code": qr_base64
            })

        return jsonify({
            "success": True,
            "count": len(results),
            "results": results,
            "generated_at": datetime.now().isoformat()
        })

    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"Batch generation failed: {str(e)}"
        }), 500

@app.route('/api/validate', methods=['POST'])
def validate_dependencies():
    """Validate that all external dependencies are properly installed"""
    dependencies = {}

    try:
        import qrcode
        dependencies['qrcode'] = {
            "installed": True,
            "version": getattr(qrcode, '__version__', 'unknown')
        }
    except ImportError:
        dependencies['qrcode'] = {"installed": False}

    try:
        import PIL
        dependencies['Pillow'] = {
            "installed": True,
            "version": PIL.__version__
        }
    except ImportError:
        dependencies['Pillow'] = {"installed": False}

    try:
        import flask
        dependencies['flask'] = {
            "installed": True,
            "version": flask.__version__
        }
    except ImportError:
        dependencies['flask'] = {"installed": False}

    try:
        import flask_cors
        dependencies['flask_cors'] = {
            "installed": True,
            "version": getattr(flask_cors, '__version__', 'unknown')
        }
    except ImportError:
        dependencies['flask_cors'] = {"installed": False}

    all_installed = all(dep.get('installed', False) for dep in dependencies.values())

    return jsonify({
        "success": all_installed,
        "dependencies": dependencies,
        "test_type": "external_dependency_fat"
    })

@app.route('/', methods=['GET'])
def index():
    """Simple UI for testing"""
    html_content = """<!DOCTYPE html>
<html>
<head>
    <title>QR Code Generator - External Dependency FAT</title>
    <style>
        body { font-family: Arial; max-width: 600px; margin: 50px auto; padding: 20px; }
        input { width: 100%; padding: 10px; margin: 10px 0; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; cursor: pointer; }
        button:hover { background: #0056b3; }
        #result { margin-top: 20px; text-align: center; }
        img { max-width: 300px; margin: 20px 0; }
        .badge { background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; }
    </style>
</head>
<body>
    <h1>QR Code Generator <span class="badge">External Dependency FAT</span></h1>
    <p>This service demonstrates external dependency integration (qrcode, Pillow)</p>

    <input type="text" id="textInput" placeholder="Enter text for QR code" />
    <button onclick="generateQR()">Generate QR Code</button>

    <div id="result"></div>

    <script>
        async function generateQR() {
            const text = document.getElementById('textInput').value;
            if (!text) {
                alert('Please enter some text');
                return;
            }

            try {
                const response = await fetch('/api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: text })
                });

                const data = await response.json();

                if (data.success) {
                    document.getElementById('result').innerHTML =
                        '<h3>Generated QR Code:</h3>' +
                        '<img src="data:image/png;base64,' + data.qr_code + '" />' +
                        '<p>Text: ' + data.text + '</p>';
                } else {
                    alert('Error: ' + data.error);
                }
            } catch (error) {
                alert('Failed to generate QR code: ' + error.message);
            }
        }
    </script>
</body>
</html>"""
    return html_content

if __name__ == '__main__':
    print("Starting QR Code Generator Service on port 5004...")
    print("External dependencies: qrcode, Pillow")
    app.run(host='0.0.0.0', port=5004, debug=False)
'''

    with open(base_dir / "app.py", "w") as f:
        f.write(backend_code)

    # Generate requirements.txt with external dependencies
    requirements = """Flask==2.3.3
Flask-CORS==4.0.0
qrcode==7.4.2
Pillow==10.1.0
"""

    with open(base_dir / "requirements.txt", "w") as f:
        f.write(requirements)

    # Generate test file
    test_code = '''#!/usr/bin/env python3
"""
Test suite for QR Code Generator Service
Tests external dependency integration and functionality
"""

import unittest
import requests
import json
import base64
from io import BytesIO
from PIL import Image

class TestQRGenerator(unittest.TestCase):
    """Test QR code generator functionality"""

    BASE_URL = "http://localhost:5004"

    def test_health_check(self):
        """Test health check endpoint"""
        response = requests.get(f"{self.BASE_URL}/api/health")
        self.assertEqual(response.status_code, 200)

        data = response.json()
        self.assertEqual(data["status"], "healthy")
        self.assertEqual(data["service"], "qr-generator")
        self.assertEqual(data["test_type"], "external_dependency_fat")

        # Check dependencies reported as installed
        deps = data.get("dependencies", {})
        self.assertTrue(deps.get("qrcode") == "installed")
        self.assertTrue(deps.get("Pillow") == "installed")

    def test_generate_qr_code(self):
        """Test single QR code generation"""
        test_text = "Hello from FAT test"

        response = requests.post(
            f"{self.BASE_URL}/api/generate",
            json={"text": test_text},
            headers={"Content-Type": "application/json"}
        )

        self.assertEqual(response.status_code, 200)

        data = response.json()
        self.assertTrue(data["success"])
        self.assertIn("qr_code", data)
        self.assertEqual(data["format"], "png")
        self.assertEqual(data["encoding"], "base64")
        self.assertEqual(data["text"], test_text)

        # Validate base64 encoded image
        try:
            img_data = base64.b64decode(data["qr_code"])
            img = Image.open(BytesIO(img_data))
            self.assertEqual(img.format, "PNG")
        except Exception as e:
            self.fail(f"Invalid QR code image: {e}")

    def test_generate_with_options(self):
        """Test QR generation with custom options"""
        response = requests.post(
            f"{self.BASE_URL}/api/generate",
            json={
                "text": "Custom QR",
                "size": 15,
                "border": 2,
                "fill_color": "blue",
                "back_color": "yellow"
            },
            headers={"Content-Type": "application/json"}
        )

        self.assertEqual(response.status_code, 200)

        data = response.json()
        self.assertTrue(data["success"])
        self.assertIn("qr_code", data)

    def test_batch_generation(self):
        """Test batch QR code generation"""
        items = ["Item 1", "Item 2", "Item 3"]

        response = requests.post(
            f"{self.BASE_URL}/api/batch",
            json={"items": items},
            headers={"Content-Type": "application/json"}
        )

        self.assertEqual(response.status_code, 200)

        data = response.json()
        self.assertTrue(data["success"])
        self.assertEqual(data["count"], 3)
        self.assertEqual(len(data["results"]), 3)

        # Validate each result
        for i, result in enumerate(data["results"]):
            self.assertEqual(result["text"], items[i])
            self.assertIn("qr_code", result)

    def test_missing_text_parameter(self):
        """Test error handling for missing text"""
        response = requests.post(
            f"{self.BASE_URL}/api/generate",
            json={},
            headers={"Content-Type": "application/json"}
        )

        self.assertEqual(response.status_code, 400)

        data = response.json()
        self.assertFalse(data["success"])
        self.assertIn("error", data)

    def test_validate_dependencies(self):
        """Test dependency validation endpoint"""
        response = requests.post(f"{self.BASE_URL}/api/validate")
        self.assertEqual(response.status_code, 200)

        data = response.json()
        self.assertTrue(data["success"])

        # Check all required dependencies are installed
        deps = data["dependencies"]
        self.assertTrue(deps["qrcode"]["installed"])
        self.assertTrue(deps["Pillow"]["installed"])
        self.assertTrue(deps["flask"]["installed"])
        self.assertTrue(deps["flask_cors"]["installed"])

if __name__ == '__main__':
    unittest.main(verbosity=2)
'''

    with open(base_dir / "test_qr_generator.py", "w") as f:
        f.write(test_code)

    # Generate README
    readme = """# QR Code Generator Service - External Dependency FAT

This service demonstrates the platform's ability to integrate external dependencies
and third-party libraries in generated applications.

## External Dependencies

- **qrcode**: Python QR Code generation library
- **Pillow**: Python Imaging Library for image processing
- **Flask**: Web framework
- **Flask-CORS**: CORS support for Flask

## API Endpoints

- `GET /api/health` - Health check with dependency status
- `POST /api/generate` - Generate single QR code
- `POST /api/batch` - Generate multiple QR codes
- `POST /api/validate` - Validate dependency installation
- `GET /` - Simple web UI for testing

## Usage

1. Install dependencies: `pip install -r requirements.txt`
2. Start the service: `python app.py`
3. Open browser to: `http://localhost:5004`

## Testing

Run tests with: `python test_qr_generator.py`

## Generated by Hive Autonomous AI Agents

This service was generated as part of the Factory Acceptance Test to validate
the platform's ability to handle external dependencies and third-party integrations.
"""

    with open(base_dir / "README.md", "w") as f:
        f.write(readme)

    print("   [OK] Generated QR code generator service with external dependencies")
    print("       - Flask API with QR code generation endpoints")
    print("       - External dependencies: qrcode, Pillow")
    print("       - Base64 image encoding")
    print("       - Batch processing capability")
    print("       - Dependency validation endpoint")

    return True


def validate_qr_generator(test_case):
    """Validate the QR code generator service"""

    app_dir = Path("apps/qr-generator-fat")

    if not app_dir.exists():
        return {"success": False, "error": "Application directory not found"}

    # Check required files
    required_files = ["app.py", "requirements.txt", "test_qr_generator.py", "README.md"]
    for file_path in required_files:
        if not (app_dir / file_path).exists():
            return {"success": False, "error": f"Missing file: {file_path}"}

    try:
        # Install external dependencies
        print("   Installing external dependencies (qrcode, Pillow)...")
        install_result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
            cwd=app_dir,
            capture_output=True,
            text=True,
            timeout=120  # Longer timeout for downloading dependencies
        )

        if install_result.returncode != 0:
            return {
                "success": False,
                "error": f"Dependencies installation failed: {install_result.stderr}"
            }

        # Start the service
        server_process = subprocess.Popen(
            [sys.executable, "app.py"],
            cwd=app_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        # Wait for service to start
        time.sleep(3)

        try:
            # Test health check
            health_response = requests.get("http://localhost:5004/api/health", timeout=5)
            if health_response.status_code != 200:
                server_process.terminate()
                return {"success": False, "error": f"Health check failed: {health_response.status_code}"}

            health_data = health_response.json()
            if health_data.get("test_type") != "external_dependency_fat":
                server_process.terminate()
                return {"success": False, "error": "Invalid test type in health check"}

            # Test dependency validation
            validate_response = requests.post("http://localhost:5004/api/validate", timeout=5)
            if validate_response.status_code != 200:
                server_process.terminate()
                return {"success": False, "error": f"Dependency validation failed: {validate_response.status_code}"}

            validate_data = validate_response.json()
            if not validate_data.get("success"):
                server_process.terminate()
                return {"success": False, "error": "External dependencies not properly installed"}

            # Test QR code generation
            qr_response = requests.post(
                "http://localhost:5004/api/generate",
                json={"text": "FAT Test Validation"},
                headers={"Content-Type": "application/json"},
                timeout=5
            )

            if qr_response.status_code != 200:
                server_process.terminate()
                return {"success": False, "error": f"QR generation failed: {qr_response.status_code}"}

            qr_data = qr_response.json()
            if not qr_data.get("success"):
                server_process.terminate()
                return {"success": False, "error": "QR generation did not succeed"}

            # Validate base64 encoded QR code exists
            if not qr_data.get("qr_code"):
                server_process.terminate()
                return {"success": False, "error": "No QR code data returned"}

            # Test batch generation
            batch_response = requests.post(
                "http://localhost:5004/api/batch",
                json={"items": ["Test1", "Test2", "Test3"]},
                headers={"Content-Type": "application/json"},
                timeout=5
            )

            if batch_response.status_code != 200:
                server_process.terminate()
                return {"success": False, "error": f"Batch generation failed: {batch_response.status_code}"}

            batch_data = batch_response.json()
            if batch_data.get("count") != 3:
                server_process.terminate()
                return {"success": False, "error": "Batch generation count mismatch"}

            # Run test suite
            test_result = subprocess.run(
                [sys.executable, "test_qr_generator.py"],
                cwd=app_dir,
                capture_output=True,
                text=True,
                timeout=60
            )

            # Terminate server
            server_process.terminate()
            server_process.wait(timeout=5)

            if test_result.returncode != 0:
                return {
                    "success": False,
                    "error": f"Test suite failed: {test_result.stderr}"
                }

            # Check for test failures
            if "FAILED" in test_result.stderr or "ERROR" in test_result.stderr:
                return {
                    "success": False,
                    "error": f"Some tests failed: {test_result.stderr}"
                }

            return {
                "success": True,
                "details": "QR generator service validated successfully with external dependencies (qrcode, Pillow) properly integrated"
            }

        except requests.RequestException as e:
            server_process.terminate()
            return {"success": False, "error": f"Request failed: {str(e)}"}

    except subprocess.TimeoutExpired:
        return {"success": False, "error": "Operation timeout"}
    except Exception as e:
        return {"success": False, "error": f"Validation error: {str(e)}"}


def run_external_dependency_test():
    """Execute the External Dependency Test"""

    test_case = {
        "name": "External Dependency Test",
        "title": "FAT-03: QR Code Generator with External Dependencies",
        "description": "Generate service using third-party libraries (qrcode, Pillow)",
        "goal": "Validate autonomous platform's ability to integrate external dependencies",
        "complexity": "MEDIUM",
        "priority": 7,
        "estimated_duration": 900,  # 15 minutes (includes dependency download)
        "task_data": {
            "project_name": "qr-generator-fat",
            "description": "QR code generator service with external library dependencies",
            "requirements": {
                "framework": "Flask",
                "external_dependencies": ["qrcode", "Pillow"],
                "endpoints": [
                    "POST /api/generate - Generate single QR code",
                    "POST /api/batch - Generate multiple QR codes",
                    "POST /api/validate - Validate dependencies"
                ],
                "features": [
                    "Base64 image encoding",
                    "Custom QR code options",
                    "Batch processing",
                    "Dependency validation"
                ]
            }
        },
        "metadata": {
            "test_type": "factory_acceptance",
            "test_id": "FAT-03",
            "complexity_level": "external_dependency",
            "autonomous_generation": True
        },
        "generator_function": generate_qr_code_service,
        "validator_function": validate_qr_generator
    }

    fat = FactoryAcceptanceTest()
    result = fat.run_test_case(test_case)
    return result


if __name__ == "__main__":
    result = run_external_dependency_test()

    if result["success"]:
        print(f"\n[SUCCESS] External Dependency Test completed successfully!")
        exit(0)
    else:
        print(f"\n[FAILURE] External Dependency Test failed: {result['error']}")
        exit(1)