#!/usr/bin/env python3
"""
QR Code Generator Service - Generated by Hive Autonomous AI Agents
External Dependency Factory Acceptance Test implementation
"""

import base64
import io
from datetime import datetime

import qrcode
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Configuration
DEFAULT_SIZE = 10
DEFAULT_BORDER = 4
DEFAULT_FILL_COLOR = "black"
DEFAULT_BACK_COLOR = "white"


def generate_qr_code(
    data, size=DEFAULT_SIZE, border=DEFAULT_BORDER, fill_color=DEFAULT_FILL_COLOR, back_color=DEFAULT_BACK_COLOR
):
    """Generate QR code and return as base64 encoded string"""

    # Create QR code instance
    qr = qrcode.QRCode(
        version=1,  # Controls size of QR code
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=size,
        border=border,
    )

    # Add data
    qr.add_data(data)
    qr.make(fit=True)

    # Create image
    img = qr.make_image(fill_color=fill_color, back_color=back_color)

    # Convert to base64
    buffer = io.BytesIO()
    img.save(buffer, format="PNG")
    buffer.seek(0)

    img_base64 = base64.b64encode(buffer.getvalue()).decode("utf-8")

    return img_base64


@app.route("/api/health", methods=["GET"])
def health_check():
    """Health check endpoint"""
    return jsonify(
        {
            "status": "healthy",
            "service": "qr-generator",
            "version": "1.0.0",
            "generated_by": "hive_autonomous_agents",
            "test_type": "external_dependency_fat",
            "dependencies": {
                "qrcode": "installed",
                "Pillow": "installed",
                "flask": "installed",
                "flask-cors": "installed",
            },
        }
    )


@app.route("/api/generate", methods=["POST"])
def generate_qr():
    """Generate QR code from provided data"""
    try:
        data = request.get_json()

        if not data or "text" not in data:
            return jsonify({"success": False, "error": "Text parameter is required"}), 400

        text = data["text"]
        size = data.get("size", DEFAULT_SIZE)
        border = data.get("border", DEFAULT_BORDER)
        fill_color = data.get("fill_color", DEFAULT_FILL_COLOR)
        back_color = data.get("back_color", DEFAULT_BACK_COLOR)

        # Generate QR code
        qr_base64 = generate_qr_code(text, size, border, fill_color, back_color)

        return jsonify(
            {
                "success": True,
                "qr_code": qr_base64,
                "format": "png",
                "encoding": "base64",
                "text": text,
                "generated_at": datetime.now().isoformat(),
            }
        )

    except Exception as e:
        return jsonify({"success": False, "error": f"QR generation failed: {str(e)}"}), 500


@app.route("/api/batch", methods=["POST"])
def generate_batch():
    """Generate multiple QR codes in batch"""
    try:
        data = request.get_json()

        if not data or "items" not in data:
            return jsonify({"success": False, "error": "Items array is required"}), 400

        items = data["items"]
        if not isinstance(items, list) or len(items) == 0:
            return jsonify({"success": False, "error": "Items must be a non-empty array"}), 400

        results = []

        for item in items:
            if isinstance(item, str):
                text = item
            elif isinstance(item, dict) and "text" in item:
                text = item["text"]
            else:
                continue

            qr_base64 = generate_qr_code(text)
            results.append({"text": text, "qr_code": qr_base64})

        return jsonify(
            {"success": True, "count": len(results), "results": results, "generated_at": datetime.now().isoformat()}
        )

    except Exception as e:
        return jsonify({"success": False, "error": f"Batch generation failed: {str(e)}"}), 500


@app.route("/api/validate", methods=["POST"])
def validate_dependencies():
    """Validate that all external dependencies are properly installed"""
    dependencies = {}

    try:
        import qrcode

        dependencies["qrcode"] = {"installed": True, "version": getattr(qrcode, "__version__", "unknown")}
    except ImportError:
        dependencies["qrcode"] = {"installed": False}

    try:
        import PIL

        dependencies["Pillow"] = {"installed": True, "version": PIL.__version__}
    except ImportError:
        dependencies["Pillow"] = {"installed": False}

    try:
        import flask

        dependencies["flask"] = {"installed": True, "version": flask.__version__}
    except ImportError:
        dependencies["flask"] = {"installed": False}

    try:
        import flask_cors

        dependencies["flask_cors"] = {"installed": True, "version": getattr(flask_cors, "__version__", "unknown")}
    except ImportError:
        dependencies["flask_cors"] = {"installed": False}

    all_installed = all(dep.get("installed", False) for dep in dependencies.values())

    return jsonify({"success": all_installed, "dependencies": dependencies, "test_type": "external_dependency_fat"})


@app.route("/", methods=["GET"])
def index():
    """Simple UI for testing"""
    html_content = """<!DOCTYPE html>
<html>
<head>
    <title>QR Code Generator - External Dependency FAT</title>
    <style>
        body { font-family: Arial; max-width: 600px; margin: 50px auto; padding: 20px; }
        input { width: 100%; padding: 10px; margin: 10px 0; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; cursor: pointer; }
        button:hover { background: #0056b3; }
        #result { margin-top: 20px; text-align: center; }
        img { max-width: 300px; margin: 20px 0; }
        .badge { background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; }
    </style>
</head>
<body>
    <h1>QR Code Generator <span class="badge">External Dependency FAT</span></h1>
    <p>This service demonstrates external dependency integration (qrcode, Pillow)</p>

    <input type="text" id="textInput" placeholder="Enter text for QR code" />
    <button onclick="generateQR()">Generate QR Code</button>

    <div id="result"></div>

    <script>
        async function generateQR() {
            const text = document.getElementById('textInput').value;
            if (!text) {
                alert('Please enter some text');
                return;
            }

            try {
                const response = await fetch('/api/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: text })
                });

                const data = await response.json();

                if (data.success) {
                    document.getElementById('result').innerHTML =
                        '<h3>Generated QR Code:</h3>' +
                        '<img src="data:image/png;base64,' + data.qr_code + '" />' +
                        '<p>Text: ' + data.text + '</p>';
                } else {
                    alert('Error: ' + data.error);
                }
            } catch (error) {
                alert('Failed to generate QR code: ' + error.message);
            }
        }
    </script>
</body>
</html>"""
    return html_content


if __name__ == "__main__":
    print("Starting QR Code Generator Service on port 5004...")
    print("External dependencies: qrcode, Pillow")
    app.run(host="0.0.0.0", port=5004, debug=False)
