# RAG Golden Set Evaluation Queries for Hive Platform
#
# This file contains curated query-answer pairs for automated quality evaluation.
# Each query tests specific RAG capabilities: semantic search, keyword matching,
# deprecation warnings, golden rule retrieval, and architectural context.
#
# Quality Targets:
# - Context Precision: ≥92% (retrieved contexts are relevant)
# - Context Recall: ≥88% (all relevant contexts retrieved)
# - Faithfulness: ≥95% (answer consistent with context)
# - Answer Relevancy: ≥90% (answer addresses query)

queries:
  # Category: CI/CD and Workflows
  - id: "cicd-001"
    query: "How do I add a new quality check to the CI/CD pipeline?"
    expected_file: ".github/workflows/ci.yml"
    expected_section: "quality-checks"
    expected_answer: "Add a new job to ci.yml under the jobs: section with steps for your quality check"
    tags: ["ci-cd", "workflow", "quality"]
    min_relevance_score: 0.85

  - id: "cicd-002"
    query: "What quality checks run on every pull request?"
    expected_file: ".github/workflows/ci.yml"
    expected_section: "jobs"
    expected_answer: "Ruff linting, mypy type checking, pytest collection, and golden rules validation"
    tags: ["ci-cd", "quality", "testing"]
    min_relevance_score: 0.80

  # Category: Database Operations
  - id: "database-001"
    query: "Show me database connection pooling patterns"
    expected_file: "packages/hive-db/src/hive_db/pool.py"
    expected_function: "ConnectionPool.__init__"
    expected_answer: "Use ConnectionPool with dependency injection pattern for async database operations"
    tags: ["database", "architecture", "async"]
    min_relevance_score: 0.90

  # Category: Async Patterns
  - id: "async-001"
    query: "How to implement async retry with exponential backoff?"
    expected_file: "packages/hive-async/src/hive_async/__init__.py"
    expected_function: "async_retry"
    expected_answer: "Use async_retry decorator from hive_async with configurable backoff strategy"
    tags: ["async", "patterns", "resilience"]
    min_relevance_score: 0.90

  # Category: Configuration Management
  - id: "config-001"
    query: "What are the rules for configuration management in Hive?"
    expected_file: "packages/hive-config/README.md"
    expected_section: "DI Pattern"
    expected_answer: "Use create_config_from_sources with dependency injection, not get_config() global state"
    tags: ["config", "golden-rules", "architecture"]
    min_relevance_score: 0.92

  # Category: Logging
  - id: "logging-001"
    query: "How should I add logging to a new Python module?"
    expected_file: "packages/hive-logging/README.md"
    expected_section: "Usage"
    expected_answer: "Use get_logger(__name__) from hive_logging, never use print() statements"
    tags: ["logging", "golden-rules"]
    min_relevance_score: 0.90

metadata:
  golden_set_version: "1.0"
  created_date: "2025-10-02"
  total_queries: 6
  quality_targets:
    context_precision: 0.92
    context_recall: 0.88
    faithfulness: 0.95
    answer_relevancy: 0.90
