"""Data models for Coder Agent results and status tracking.
"""

from __future__ import annotations

from datetime import UTC, datetime
from enum import Enum
from pathlib import Path
from typing import Any

from pydantic import BaseModel, Field


class ExecutionStatus(str, Enum):
    """Status of code generation execution"""

    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    VALIDATION_FAILED = "validation_failed"


class TaskResult(BaseModel):
    """Result of a single task execution"""

    task_id: str = Field(..., description="Task identifier from ExecutionPlan")
    task_type: str = Field(..., description="Type of task executed")
    status: ExecutionStatus = Field(..., description="Task execution status")
    files_created: list[str] = Field(default_factory=list, description="Files generated by this task")
    files_modified: list[str] = Field(default_factory=list, description="Files modified by this task")
    duration_seconds: float = Field(default=0.0, description="Task execution time")
    error_message: str | None = Field(None, description="Error message if task failed")
    validation_passed: bool = Field(True, description="Whether validation checks passed")

    def to_dict(self) -> dict[str, Any]:
        """Convert to dictionary for logging/reporting"""
        return {
            "task_id": self.task_id,
            "task_type": self.task_type,
            "status": self.status.value,
            "files_created": len(self.files_created),
            "files_modified": len(self.files_modified),
            "duration_seconds": round(self.duration_seconds, 2),
            "error": self.error_message,
            "validation_passed": self.validation_passed,
        }


class ValidationResult(BaseModel):
    """Result of code validation checks"""

    syntax_valid: bool = Field(True, description="All files compile without syntax errors")
    golden_rules_passed: bool = Field(True, description="Passes Golden Rules validation")
    tests_passed: bool = Field(True, description="Test suite passes")
    type_check_passed: bool = Field(True, description="Type checking passes")
    errors: list[str] = Field(default_factory=list, description="List of validation errors")
    warnings: list[str] = Field(default_factory=list, description="List of validation warnings")

    def is_valid(self) -> bool:
        """Check if all critical validations passed"""
        return self.syntax_valid and self.golden_rules_passed


class ExecutionResult(BaseModel):
    """Complete result of ExecutionPlan execution"""

    plan_id: str = Field(..., description="ID of executed plan")
    service_name: str = Field(..., description="Generated service name")
    status: ExecutionStatus = Field(..., description="Overall execution status")
    output_directory: Path = Field(..., description="Directory where service was generated")
    total_tasks: int = Field(..., description="Total number of tasks in plan")
    tasks_completed: int = Field(default=0, description="Number of successfully completed tasks")
    tasks_failed: int = Field(default=0, description="Number of failed tasks")
    task_results: list[TaskResult] = Field(default_factory=list, description="Results for each task")
    validation: ValidationResult | None = Field(None, description="Final validation results")
    files_created: list[str] = Field(default_factory=list, description="All generated files")
    files_modified: list[str] = Field(default_factory=list, description="All modified files")
    total_duration_seconds: float = Field(default=0.0, description="Total execution time")
    started_at: datetime = Field(default_factory=lambda: datetime.now(UTC), description="Execution start time")
    completed_at: datetime | None = Field(None, description="Execution completion time")
    error_message: str | None = Field(None, description="Overall error if execution failed")

    def to_summary_dict(self) -> dict[str, Any]:
        """Create summary dictionary for reporting"""
        return {
            "plan_id": self.plan_id,
            "service_name": self.service_name,
            "status": self.status.value,
            "output_directory": str(self.output_directory),
            "tasks": {"total": self.total_tasks, "completed": self.tasks_completed, "failed": self.tasks_failed},
            "files": {"created": len(self.files_created), "modified": len(self.files_modified)},
            "duration_seconds": round(self.total_duration_seconds, 2),
            "validation": {
                "syntax": self.validation.syntax_valid if self.validation else None,
                "golden_rules": self.validation.golden_rules_passed if self.validation else None,
                "tests": self.validation.tests_passed if self.validation else None,
            }
            if self.validation
            else None,
            "error": self.error_message,
        }

    def to_json_file(self, filepath: str) -> None:
        """Write execution result to JSON file"""
        Path(filepath).write_text(self.model_dump_json(indent=2), encoding="utf-8")
