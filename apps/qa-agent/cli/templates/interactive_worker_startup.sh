#!/bin/bash
# Interactive CC Worker Startup Script (HITL)
# Auto-generated by QA Agent CC Spawner
# Worker ID: {worker_id}
# Task ID: {task_id}
# Escalation Reason: {escalation_reason}

set -e  # Exit on error

# ============================================================
# WORKER METADATA (injected by persona builder)
# ============================================================
export WORKER_ID="{worker_id}"
export TASK_ID="{task_id}"
export QA_TYPE="{qa_type}"
export CC_WORKER_MODE="interactive"
export ESCALATION_REASON="{escalation_reason}"

# ============================================================
# RAG CONTEXT (injected by persona builder)
# ============================================================
export RAG_CONTEXT='{rag_context_json}'

# ============================================================
# VIOLATIONS DATA (injected by persona builder)
# ============================================================
export VIOLATIONS='{violations_json}'

# ============================================================
# HITL ESCALATION UI
# ============================================================

# Parse counts
RAG_PATTERN_COUNT=$(echo "$RAG_CONTEXT" | jq 'length' 2>/dev/null || echo "0")
VIOLATION_COUNT=$(echo "$VIOLATIONS" | jq 'length' 2>/dev/null || echo "0")

# Display escalation banner
clear
echo "================================================================"
echo "  QA AGENT - HUMAN-IN-THE-LOOP (HITL) REVIEW REQUIRED"
echo "================================================================"
echo ""
echo "Worker ID: $WORKER_ID"
echo "Task ID: $TASK_ID"
echo "QA Type: $QA_TYPE"
echo ""
echo "ESCALATION REASON:"
echo "  $ESCALATION_REASON"
echo ""
echo "================================================================"
echo ""
echo "Task Description:"
echo "  {task_description}"
echo ""
echo "Context Available:"
echo "  - RAG Patterns: $RAG_PATTERN_COUNT"
echo "  - Violations: $VIOLATION_COUNT"
echo ""
echo "================================================================"
echo ""

# ============================================================
# DISPLAY RAG CONTEXT
# ============================================================
if [ "$RAG_PATTERN_COUNT" -gt 0 ]; then
    echo "RAG CONTEXT - Similar Fix Patterns from History:"
    echo "----------------------------------------------------------------"
    echo "$RAG_CONTEXT" | jq -r '.[] | "
Pattern \\(.type) (similarity: \\(.similarity)):
  \\(.message // .file // "N/A")
  \\(.diff // .content // "")
"' 2>/dev/null || echo "(error parsing RAG context)"
    echo ""
fi

# ============================================================
# DISPLAY VIOLATIONS
# ============================================================
if [ "$VIOLATION_COUNT" -gt 0 ]; then
    echo "VIOLATIONS TO REVIEW:"
    echo "----------------------------------------------------------------"
    echo "$VIOLATIONS" | jq -r '.[] | "
[\\(.type)] \\(.file)
  \\(.message // "No message")
  Line: \\(.line // "N/A"), Column: \\(.column // "N/A")
"' 2>/dev/null || echo "(error parsing violations)"
    echo ""
fi

echo "================================================================"
echo ""

# ============================================================
# INTERACTIVE REVIEW WORKFLOW
# ============================================================
echo "REVIEW OPTIONS:"
echo "  1) Open files in editor for manual review"
echo "  2) View full violation details (JSON)"
echo "  3) View RAG patterns in detail"
echo "  4) Execute automated fix (with CC worker assistance)"
echo "  5) Mark as cannot-fix (escalate further)"
echo "  6) Complete review (mark task as resolved)"
echo ""

# Interactive loop
while true; do
    read -p "Select option (1-6) or 'q' to quit: " choice

    case $choice in
        1)
            echo ""
            echo "Opening files for manual review..."
            # Extract unique file paths from violations
            FILES=$(echo "$VIOLATIONS" | jq -r '.[].file' 2>/dev/null | sort -u)
            echo "$FILES"
            echo ""
            echo "Use your preferred editor to review and fix violations."
            echo "Press Enter when done..."
            read
            ;;
        2)
            echo ""
            echo "FULL VIOLATION DETAILS (JSON):"
            echo "$VIOLATIONS" | jq '.' 2>/dev/null || echo "$VIOLATIONS"
            echo ""
            ;;
        3)
            echo ""
            echo "RAG PATTERNS IN DETAIL (JSON):"
            echo "$RAG_CONTEXT" | jq '.' 2>/dev/null || echo "$RAG_CONTEXT"
            echo ""
            ;;
        4)
            echo ""
            echo "Executing automated fix with CC worker assistance..."
            echo "(MVP: This would invoke Claude Code with RAG context)"
            echo ""
            # In production: Spawn headless CC worker with same context
            ;;
        5)
            echo ""
            read -p "Escalation notes: " notes
            echo "Marking task as cannot-fix..."
            echo "Escalation notes: $notes"
            echo "(MVP: This would update task status in orchestrator)"
            echo ""
            ;;
        6)
            echo ""
            echo "Marking task as resolved..."
            echo "(MVP: This would update task status to COMPLETED)"
            echo ""
            echo "Thank you for your review!"
            echo "Exiting..."
            exit 0
            ;;
        q|Q)
            echo ""
            echo "Exiting HITL review..."
            exit 1
            ;;
        *)
            echo ""
            echo "Invalid option. Please select 1-6 or 'q'."
            echo ""
            ;;
    esac
done

# ============================================================
# WORKER CLEANUP
# ============================================================
echo ""
echo "================================================================"
echo "HITL Review Session Ended"
echo "================================================================"
echo "Worker ID: $WORKER_ID"
echo "Task ID: $TASK_ID"
echo ""

exit 0
