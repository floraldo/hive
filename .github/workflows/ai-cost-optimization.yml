name: ðŸ’° AI Cost Optimization Analysis

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      analysis_days:
        description: 'Days to analyze'
        required: false
        default: '30'
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  cost-analysis:
    runs-on: ubuntu-latest
    name: AI Cost Analysis & Optimization

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry lock --no-update
          poetry install --with dev,workspace --no-root

      - name: Run AI Cost Optimizer
        id: cost_analysis
        continue-on-error: true
        run: |
          poetry run python scripts/performance/ai_cost_optimizer.py \
            --days ${{ github.event.inputs.analysis_days || '30' }} \
            --format markdown \
            --output cost_optimization_report.md

      - name: Upload Cost Report
        uses: actions/upload-artifact@v4
        with:
          name: ai-cost-optimization-report
          path: cost_optimization_report.md
          retention-days: 90

      - name: Check for High-Priority Optimizations
        id: check_priority
        run: |
          # Script exit code 1 means high-priority optimizations found
          if [ ${{ steps.cost_analysis.outcome }} == 'failure' ]; then
            echo "high_priority=true" >> $GITHUB_OUTPUT
            echo "has_recommendations=true" >> $GITHUB_OUTPUT
          else
            echo "high_priority=false" >> $GITHUB_OUTPUT
            echo "has_recommendations=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Cost Optimization Issue
        if: steps.check_priority.outputs.high_priority == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportContent = '';

            try {
              reportContent = fs.readFileSync('cost_optimization_report.md', 'utf8');
            } catch (error) {
              reportContent = 'Report generation failed - check workflow logs';
            }

            // Look for existing cost optimization issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['cost-optimization', 'ai', 'automated'],
              state: 'open'
            });

            const issueTitle = 'ðŸ’° AI Cost Optimization Recommendations';
            const issueBody = `# AI Cost Optimization Analysis

            ðŸš¨ **High-Priority Optimizations Detected**

            This automated analysis has identified opportunities to reduce AI model costs.

            ${reportContent}

            ---

            **Action Required:**
            1. Review high-priority optimization opportunities
            2. Evaluate model alternatives for cost savings
            3. Implement recommended optimizations
            4. Monitor cost trends after changes

            **Automation:**
            - This issue is automatically generated by the AI Cost Optimizer
            - Analysis runs weekly every Monday at 9 AM UTC
            - Manual runs: \`gh workflow run ai-cost-optimization.yml\`

            *Generated: ${new Date().toISOString()}*`;

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: issueTitle,
                body: issueBody,
                labels: ['cost-optimization', 'ai', 'automated', 'high-priority']
              });

              // Add comment about new analysis
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## ðŸ“Š Weekly Cost Analysis Update - ${new Date().toLocaleDateString()}

                New high-priority cost optimization opportunities have been identified. Please review the updated recommendations above.

                **Quick Stats:**
                - Analysis Period: ${{ github.event.inputs.analysis_days || '30' }} days
                - Report: [Download Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });

              console.log(`Updated existing issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['cost-optimization', 'ai', 'automated', 'high-priority']
              });

              console.log(`Created new issue #${issue.data.number}`);
            }

      - name: Post Success Comment
        if: steps.check_priority.outputs.high_priority == 'false' && steps.check_priority.outputs.has_recommendations == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // No high-priority optimizations - close existing issue if open
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['cost-optimization', 'ai', 'automated'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## âœ… Cost Analysis Clear - ${new Date().toLocaleDateString()}

                Latest cost analysis shows no high-priority optimization opportunities.

                AI cost usage is within acceptable parameters. This issue can be closed.`
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                state: 'closed'
              });

              console.log(`Closed issue #${issues.data[0].number} - no optimizations needed`);
            }

      - name: Summary
        run: |
          echo "## AI Cost Optimization Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Period:** ${{ github.event.inputs.analysis_days || '30' }} days" >> $GITHUB_STEP_SUMMARY
          echo "**High-Priority Items:** ${{ steps.check_priority.outputs.high_priority }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_priority.outputs.high_priority }}" == "true" ]; then
            echo "ðŸš¨ **Action Required:** High-priority cost optimizations identified" >> $GITHUB_STEP_SUMMARY
            echo "ðŸ“Š Review the generated issue for detailed recommendations" >> $GITHUB_STEP_SUMMARY
          else
            echo "âœ… **Status:** No high-priority optimizations needed" >> $GITHUB_STEP_SUMMARY
            echo "ðŸ’° AI cost usage is within acceptable parameters" >> $GITHUB_STEP_SUMMARY
          fi