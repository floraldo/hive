name: 🔮 Predictive Failure Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      analysis_interval:
        description: 'Analysis interval (minutes)'
        required: false
        default: '5'
        type: string

permissions:
  contents: write
  issues: write

jobs:
  predictive-analysis:
    runs-on: ubuntu-latest
    name: Predictive Failure Analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --with dev,workspace

      - name: Run Predictive Analysis
        id: analysis
        continue-on-error: true
        run: |
          poetry run python scripts/monitoring/predictive_analysis_runner.py \
            --output predictive_analysis_results.json

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: predictive-analysis-results
          path: predictive_analysis_results.json
          retention-days: 90

      - name: Parse Analysis Results
        id: parse_results
        run: |
          if [ -f predictive_analysis_results.json ]; then
            alerts_count=$(jq -r '.alerts_generated // 0' predictive_analysis_results.json)
            success=$(jq -r '.success // false' predictive_analysis_results.json)
            echo "alerts_count=$alerts_count" >> $GITHUB_OUTPUT
            echo "success=$success" >> $GITHUB_OUTPUT
          else
            echo "alerts_count=0" >> $GITHUB_OUTPUT
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create/Update Predictive Alert Issues
        if: steps.parse_results.outputs.alerts_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read analysis results
            let results;
            try {
              const resultsData = fs.readFileSync('predictive_analysis_results.json', 'utf8');
              results = JSON.parse(resultsData);
            } catch (error) {
              console.log('Could not read analysis results');
              return;
            }

            if (!results.alerts || results.alerts.length === 0) {
              console.log('No alerts to process');
              return;
            }

            // Process each alert
            for (const alert of results.alerts) {
              const severity = alert.severity.toUpperCase();
              const issueTitle = `🔮 Predictive Alert: ${alert.service_name} ${alert.metric_type} [${severity}]`;

              // Check for existing issue
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['predictive-alert', alert.severity, alert.service_name],
                state: 'open'
              });

              const timeToBreachHours = alert.time_to_breach_seconds
                ? (alert.time_to_breach_seconds / 3600).toFixed(1)
                : 'N/A';

              const issueBody = `# 🔮 Predictive Failure Alert

**Alert ID**: \`${alert.alert_id}\`
**Service**: ${alert.service_name}
**Metric**: ${alert.metric_type}
**Severity**: ${severity}
**Confidence**: ${(alert.confidence * 100).toFixed(0)}%

## Current Status

- **Current Value**: ${alert.current_value.toFixed(2)}
- **Predicted Value**: ${alert.predicted_value.toFixed(2)}
- **Threshold**: ${alert.threshold.toFixed(2)}
- **Time to Breach**: ${timeToBreachHours} hours

## Recommended Actions

${alert.recommended_actions.map(action => `- ${action}`).join('\n')}

## Analysis Details

- **Analysis Time**: ${results.timestamp}
- **Analysis Duration**: ${results.duration_seconds.toFixed(2)}s

---

*Generated by PROJECT VANGUARD Predictive Monitoring System*
*Next analysis in 15 minutes*`;

              if (existingIssues.data.length > 0) {
                // Update existing issue
                const issue = existingIssues.data[0];
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: issueBody
                });

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## 📊 Predictive Alert Update - ${new Date().toLocaleString()}

Alert persists. Current confidence: ${(alert.confidence * 100).toFixed(0)}%
Time to predicted breach: ${timeToBreachHours} hours

Please review recommended actions above.`
                });

                console.log(`Updated existing issue #${issue.number}`);
              } else {
                // Create new issue
                const labels = [
                  'predictive-alert',
                  alert.severity,
                  alert.service_name,
                  'automated'
                ];

                if (severity === 'CRITICAL' || severity === 'HIGH') {
                  labels.push('urgent');
                }

                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: labels
                });

                console.log(`Created new issue #${issue.data.number}`);
              }
            }

      - name: Resolve Cleared Alerts
        uses: actions/github-script@v7
        with:
          script: |
            // Close issues for alerts that are no longer active
            const openIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['predictive-alert'],
              state: 'open'
            });

            // Read current alerts
            const fs = require('fs');
            let currentAlertIds = [];

            try {
              const resultsData = fs.readFileSync('predictive_analysis_results.json', 'utf8');
              const results = JSON.parse(resultsData);
              currentAlertIds = results.alerts ? results.alerts.map(a => a.alert_id) : [];
            } catch (error) {
              console.log('Could not read current alerts');
            }

            // Check if any open issues should be closed
            for (const issue of openIssues.data) {
              // Extract alert ID from issue body
              const alertIdMatch = issue.body.match(/Alert ID.*`([^`]+)`/);

              if (alertIdMatch) {
                const alertId = alertIdMatch[1];

                // If alert is not in current alerts, it has cleared
                if (!currentAlertIds.includes(alertId)) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `## ✅ Alert Cleared - ${new Date().toLocaleString()}

The predicted failure condition has cleared. Metrics have returned to acceptable levels.

Closing this predictive alert.`
                  });

                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });

                  console.log(`Closed resolved alert issue #${issue.number}`);
                }
              }
            }

      - name: Summary
        run: |
          echo "## 🔮 Predictive Failure Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f predictive_analysis_results.json ]; then
            alerts_count=$(jq -r '.alerts_generated // 0' predictive_analysis_results.json)
            duration=$(jq -r '.duration_seconds // 0' predictive_analysis_results.json)

            echo "**Alerts Generated:** $alerts_count" >> $GITHUB_STEP_SUMMARY
            echo "**Analysis Duration:** ${duration}s" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$alerts_count" -gt 0 ]; then
              echo "⚠️ **Action Required:** Predictive failures detected" >> $GITHUB_STEP_SUMMARY
              echo "📋 Review generated issues for detailed recommendations" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Status:** No predictive failures detected" >> $GITHUB_STEP_SUMMARY
              echo "🎯 All monitored services within acceptable parameters" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Status:** Analysis failed" >> $GITHUB_STEP_SUMMARY
            echo "📋 Check workflow logs for details" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Next analysis in 15 minutes*" >> $GITHUB_STEP_SUMMARY