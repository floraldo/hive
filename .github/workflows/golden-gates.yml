name: üö™ Golden Gates - Asynchronous Quality Validation

# Asynchronous Quality Workflow:
# - Feature agents commit with minimal friction (fast pre-commit)
# - QA agent triggered periodically or manually to consolidate quality
# - CI failures create tasks for QA agent, don't block feature development

on:
  # Manual trigger: QA agent can run validation on-demand
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Validation strictness level'
        required: false
        default: 'ERROR'
        type: choice
        options:
          - CRITICAL
          - ERROR
          - WARNING
          - INFO

  # Periodic trigger: Every 4 hours during business hours (8am-8pm UTC)
  schedule:
    - cron: '0 8,12,16,20 * * *'

  # Optional: Still validate PRs to provide feedback before merge
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ==============================================
  # GATE 1: Syntax Integrity (Layer 1)
  # Fast-fail on syntax errors - ZERO TOLERANCE
  # ==============================================
  syntax-gate:
    name: ‚ö° Gate 1 - Syntax Integrity
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö° Validate Zero Syntax Errors
        run: |
          echo "‚ö° GATE 1: Syntax Integrity Check"
          echo "========================================="
          echo "Layer 1 achieved ZERO syntax errors."
          echo "This gate ensures we NEVER regress."
          echo ""

          # Count syntax errors
          ERROR_COUNT=$(python -m compileall -q . 2>&1 | grep -c "Error compiling" || true)

          echo "Syntax errors found: $ERROR_COUNT"
          echo ""

          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå GATE 1 FAILED: Syntax errors detected!"
            echo ""
            echo "Layer 1 regression - platform has syntax errors."
            echo "Run locally: python -m compileall -q . 2>&1 | grep 'Error compiling'"
            echo ""
            exit 1
          else
            echo "‚úÖ GATE 1 PASSED: Zero syntax errors maintained"
            echo "Platform remains syntactically valid."
          fi

  # ==============================================
  # GATE 2: Test Collection (Layer 2)
  # All tests must be importable - no broken imports
  # ==============================================
  test-collection-gate:
    name: üìã Gate 2 - Test Collection
    runs-on: ubuntu-latest
    needs: syntax-gate
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install All Hive Packages
        run: |
          echo "üì¶ Installing Hive platform packages..."
          python -m pip install --upgrade pip

          # Install all packages in dependency order
          for pkg in hive-logging hive-config hive-cache hive-db hive-errors \
                     hive-async hive-bus hive-ai hive-performance \
                     hive-service-discovery hive-deployment hive-tests \
                     hive-orchestration; do
            if [ -d "packages/$pkg" ]; then
              echo "Installing $pkg..."
              pip install -e "packages/$pkg"
            fi
          done

          # Install apps for testing
          for app in ecosystemiser ai-planner ai-reviewer hive-orchestrator; do
            if [ -d "apps/$app" ]; then
              echo "Installing $app..."
              pip install -e "apps/$app" || echo "Warning: $app install had issues, continuing..."
            fi
          done

      - name: üìã Validate Test Collection
        run: |
          echo "üìã GATE 2: Test Collection Validation"
          echo "========================================="
          echo "All tests must be importable (no ModuleNotFoundError)."
          echo ""

          # Run pytest collection
          pytest --collect-only > collection_output.log 2>&1 || true

          # Extract stats
          TESTS_COLLECTED=$(grep -oP '\d+(?= tests? collected)' collection_output.log | tail -1 || echo "0")
          ERRORS=$(grep -oP '\d+(?= errors?)' collection_output.log | tail -1 || echo "0")

          echo "Tests collected: $TESTS_COLLECTED"
          echo "Collection errors: $ERRORS"
          echo ""

          if [ "$ERRORS" -gt 0 ]; then
            echo "‚ùå GATE 2 FAILED: Test collection errors detected!"
            echo ""
            echo "Found $ERRORS import/collection errors."
            echo ""
            echo "Sample errors:"
            grep -E "ModuleNotFoundError|ImportError" collection_output.log | head -10 || true
            echo ""
            echo "Run locally: pytest --collect-only"
            exit 1
          else
            echo "‚úÖ GATE 2 PASSED: All $TESTS_COLLECTED tests collected successfully"
            echo "No import errors detected."
          fi

  # ==============================================
  # GATE 3: Boy Scout Rule (Layer 3 - Our Innovation!)
  # Linting violations CANNOT increase
  # ==============================================
  boy-scout-gate:
    name: üßπ Gate 3 - Boy Scout Rule
    runs-on: ubuntu-latest
    needs: test-collection-gate
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          pip install -e packages/hive-tests/
          pip install -e packages/hive-logging/

      - name: üßπ Enforce Boy Scout Rule
        run: |
          echo "üßπ GATE 3: Boy Scout Rule Enforcement"
          echo "========================================="
          echo "Rule: Always leave code cleaner than you found it."
          echo "Linting violations CANNOT increase."
          echo ""

          # Run the Boy Scout Rule test
          pytest packages/hive-tests/tests/unit/test_boy_scout_rule.py::TestBoyScoutRule::test_linting_violations_do_not_increase -v

          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo ""
            echo "‚úÖ GATE 3 PASSED: Boy Scout Rule maintained"
            echo "No new linting violations introduced."
            echo "Technical debt is stable or decreasing."
          else
            echo ""
            echo "‚ùå GATE 3 FAILED: Boy Scout Rule violated!"
            echo ""
            echo "This PR increases linting violations."
            echo "Run locally: ruff check . --fix"
            echo "Fix violations in files you touched."
            exit 1
          fi

      - name: üßπ Syntax Error Regression Check
        run: |
          echo ""
          echo "üîç Additional check: Syntax error regression"

          # Also run the syntax error test from Boy Scout Rule
          pytest packages/hive-tests/tests/unit/test_boy_scout_rule.py::TestBoyScoutRule::test_syntax_errors_remain_zero -v

  # ==============================================
  # GATE 4A: Core Validation (STRICT)
  # Core packages held to highest standards
  # ==============================================
  core-validation-gate:
    name: üèõÔ∏è Gate 4A - Core Validation (STRICT)
    runs-on: ubuntu-latest
    needs: boy-scout-gate
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          pip install -e packages/hive-tests/
          pip install -e packages/hive-logging/

      - name: üèõÔ∏è Core Test Validation (STRICT)
        run: |
          echo "üèõÔ∏è GATE 4A: Core Validation - Strict Quality Standards"
          echo "========================================="
          echo "Core infrastructure held to highest standards."
          echo ""

          # Run only Core tests with strict markers
          pytest -m core --strict-markers -v || {
            echo ""
            echo "‚ùå Core tests failed!"
            echo "Core infrastructure tests must pass."
            exit 1
          }

          echo ""
          echo "‚úÖ Core tests passed"

      - name: üèõÔ∏è Core Linting (ALL rules enforced)
        run: |
          echo ""
          echo "üîç Core Linting - All rules enforced"
          echo "========================================="

          # Strict linting on packages/ with minimal ignores
          ruff check packages/ --select ALL || {
            echo ""
            echo "‚ùå Core linting failed!"
            echo "Run locally: ruff check packages/ --select ALL --fix"
            exit 1
          }

          echo ""
          echo "‚úÖ Core linting passed"

  # ==============================================
  # GATE 4B: Crust Validation (PRAGMATIC)
  # Apps held to pragmatic standards
  # ==============================================
  crust-validation-gate:
    name: üß© Gate 4B - Crust Validation (PRAGMATIC)
    runs-on: ubuntu-latest
    needs: boy-scout-gate
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          pip install -e packages/hive-tests/
          pip install -e packages/hive-logging/

      - name: üß© Crust Test Discovery
        run: |
          echo "üß© GATE 4B: Crust Validation - Pragmatic Standards"
          echo "========================================="
          echo "Business logic tests - pragmatic quality."
          echo ""

          # Verify crust tests are discoverable
          pytest -m crust --collect-only || {
            echo ""
            echo "‚ùå Crust test collection failed!"
            echo "Tests must be importable."
            exit 1
          }

          echo ""
          echo "‚úÖ Crust tests discoverable"

      - name: üß© Crust Linting (Pragmatic ignores)
        run: |
          echo ""
          echo "üîç Crust Linting - Pragmatic rules"
          echo "========================================="

          # Pragmatic linting on apps/ and integration_tests/ with configured ignores
          ruff check apps/ integration_tests/ || {
            echo ""
            echo "‚ùå Crust linting failed!"
            echo "Run locally: ruff check apps/ integration_tests/ --fix"
            exit 1
          }

          echo ""
          echo "‚úÖ Crust linting passed"

  # ==============================================
  # GATE 4C: Golden Rules (Architecture)
  # Architectural integrity at ERROR level
  # ==============================================
  golden-rules-gate:
    name: üèÜ Gate 4C - Golden Rules
    runs-on: ubuntu-latest
    needs: boy-scout-gate
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e packages/hive-tests/
          pip install -e packages/hive-logging/

      - name: üèÜ Validate Golden Rules
        run: |
          echo "üèÜ GATE 4C: Golden Rules Architectural Validation"
          echo "========================================="
          echo "Enforcing architectural integrity at ERROR level."
          echo "CRITICAL and ERROR rules are non-negotiable."
          echo ""

          # Run Golden Rules at ERROR level
          python scripts/validation/validate_golden_rules.py --level ERROR

          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo ""
            echo "‚úÖ GATE 4C PASSED: All Golden Rules satisfied"
            echo "Architectural integrity maintained."
          else
            echo ""
            echo "‚ùå GATE 4C FAILED: Golden Rules violations detected!"
            echo ""
            echo "This PR violates architectural constraints."
            echo "Run locally: python scripts/validation/validate_golden_rules.py --level ERROR"
            exit 1
          fi

  # ==============================================
  # SUMMARY: All Gates Status
  # ==============================================
  gates-summary:
    name: ‚úÖ Golden Gates Summary
    runs-on: ubuntu-latest
    needs: [syntax-gate, test-collection-gate, boy-scout-gate, core-validation-gate, crust-validation-gate, golden-rules-gate]
    if: always()

    steps:
      - name: ‚úÖ Gates Status Report
        run: |
          echo "======================================"
          echo "üö™ GOLDEN GATES - QUALITY ENFORCEMENT"
          echo "======================================"
          echo ""
          echo "All 6 mandatory gates have been evaluated:"
          echo ""
          echo "‚ö° Gate 1  - Syntax Integrity:      ${{ needs.syntax-gate.result }}"
          echo "üìã Gate 2  - Test Collection:      ${{ needs.test-collection-gate.result }}"
          echo "üßπ Gate 3  - Boy Scout Rule:       ${{ needs.boy-scout-gate.result }}"
          echo "üèõÔ∏è Gate 4A - Core Validation:      ${{ needs.core-validation-gate.result }}"
          echo "üß© Gate 4B - Crust Validation:     ${{ needs.crust-validation-gate.result }}"
          echo "üèÜ Gate 4C - Golden Rules:         ${{ needs.golden-rules-gate.result }}"
          echo ""

          # Check if all gates passed
          if [ "${{ needs.syntax-gate.result }}" == "success" ] && \
             [ "${{ needs.test-collection-gate.result }}" == "success" ] && \
             [ "${{ needs.boy-scout-gate.result }}" == "success" ] && \
             [ "${{ needs.core-validation-gate.result }}" == "success" ] && \
             [ "${{ needs.crust-validation-gate.result }}" == "success" ] && \
             [ "${{ needs.golden-rules-gate.result }}" == "success" ]; then
            echo "‚úÖ ALL GATES PASSED!"
            echo ""
            echo "This PR maintains all quality standards:"
            echo "  ‚Ä¢ Zero syntax errors (Layer 1)"
            echo "  ‚Ä¢ All tests importable (Layer 2)"
            echo "  ‚Ä¢ No new linting violations (Boy Scout Rule)"
            echo "  ‚Ä¢ Core infrastructure strict validation (Gate 4A)"
            echo "  ‚Ä¢ Crust business logic pragmatic validation (Gate 4B)"
            echo "  ‚Ä¢ Architectural integrity (Gate 4C - Golden Rules)"
            echo ""
            echo "üéâ Excellent work! The foundation remains strong."
            exit 0
          else
            echo "‚ùå ONE OR MORE GATES FAILED!"
            echo ""
            echo "Asynchronous Quality Workflow: Failures logged for QA agent."
            echo "Review the failed gates above and fix the issues."
            echo ""
            echo "üè∞ The Golden Gates protect the platform's quality foundation."
            exit 1
          fi

  # ==============================================
  # QA AGENT TASK CREATION (On Failure)
  # Create GitHub issue for QA agent when gates fail
  # ==============================================
  create-qa-task:
    name: üìã Create QA Agent Task
    runs-on: ubuntu-latest
    needs: gates-summary
    if: always() && needs.gates-summary.result == 'failure' && github.event_name != 'pull_request'

    steps:
      - name: üìã Create Technical Debt Issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `[QA-AGENT] Quality Gate Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Quality Gate Failure Detected

            **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Triggered**: ${new Date().toISOString()}
            **Event**: ${{ github.event_name }}

            ### Failed Gates
            - ‚ö° Gate 1 (Syntax): ${{ needs.syntax-gate.result }}
            - üìã Gate 2 (Test Collection): ${{ needs.test-collection-gate.result }}
            - üßπ Gate 3 (Boy Scout Rule): ${{ needs.boy-scout-gate.result }}
            - üèõÔ∏è Gate 4A (Core Validation): ${{ needs.core-validation-gate.result }}
            - üß© Gate 4B (Crust Validation): ${{ needs.crust-validation-gate.result }}
            - üèÜ Gate 4C (Golden Rules): ${{ needs.golden-rules-gate.result }}

            ### QA Agent Action Required
            1. Review the workflow run logs above
            2. Run local validation: \`python scripts/validation/validate_golden_rules.py --level ERROR\`
            3. Review bypass log: \`python scripts/qa/review-bypasses.py\`
            4. Fix violations and commit with strict pre-commit hooks
            5. Close this issue once codebase is clean

            ### Priority
            - **High**: Syntax errors, test collection failures
            - **Medium**: Boy Scout Rule violations, Core/Crust validation
            - **Low**: Golden Rules warnings (if not ERROR level)
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['tech-debt', 'qa-agent', 'automated'],
              assignees: []  // QA agent role - configure as needed
            });

  # ==============================================
  # OPTIONAL: Full Test Suite (Non-Blocking)
  # Runs after gates pass for deeper validation
  # ==============================================
  full-test-suite:
    name: üß™ Full Test Suite (Optional)
    runs-on: ubuntu-latest
    needs: [syntax-gate, test-collection-gate, boy-scout-gate, golden-rules-gate]
    continue-on-error: true
    if: github.event.pull_request.draft == false

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip

          # Install all packages
          for pkg in packages/*/; do
            if [ -f "$pkg/pyproject.toml" ]; then
              pip install -e "$pkg" || echo "Warning: $pkg install had issues"
            fi
          done

      - name: üß™ Run Full Test Suite
        run: |
          echo "üß™ Running full test suite..."
          echo "This is optional and non-blocking."
          echo ""

          pytest -v --tb=short || echo "Some tests failed (non-blocking)"
