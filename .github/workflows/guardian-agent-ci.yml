name: Guardian Agent CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/guardian-agent/**'
      - '.github/workflows/guardian-agent-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/guardian-agent/**'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/guardian-agent

jobs:
  test:
    name: Test Guardian Agent
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, failure-scenarios]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: apps/guardian-agent/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: apps/guardian-agent
        run: poetry install --no-interaction --no-root

      - name: Run ${{ matrix.test-suite }} tests
        working-directory: apps/guardian-agent
        run: |
          if [ "${{ matrix.test-suite }}" = "unit" ]; then
            poetry run pytest tests/unit -v --cov=guardian_agent --cov-report=xml
          elif [ "${{ matrix.test-suite }}" = "integration" ]; then
            poetry run pytest tests/integration -v
          else
            poetry run pytest tests/unit/test_failure_scenarios.py -v
          fi

      - name: Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/guardian-agent/coverage.xml
          flags: guardian-agent
          name: guardian-agent-coverage

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        working-directory: apps/guardian-agent
        run: poetry install --no-interaction --no-root

      - name: Run Black
        working-directory: apps/guardian-agent
        run: poetry run black --check src tests

      - name: Run Ruff
        working-directory: apps/guardian-agent
        run: poetry run ruff check src tests

      - name: Run MyPy
        working-directory: apps/guardian-agent
        run: poetry run mypy src

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/guardian-agent'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./apps/guardian-agent
          base: ${{ github.event.repository.default_branch }}

  build:
    name: Build Docker Image
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/guardian-agent
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          kubectl apply -f apps/guardian-agent/k8s/ -n hive-staging
          kubectl set image deployment/guardian-agent guardian-agent=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} -n hive-staging
          kubectl rollout status deployment/guardian-agent -n hive-staging

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          kubectl apply -f apps/guardian-agent/k8s/ -n hive-platform
          kubectl set image deployment/guardian-agent guardian-agent=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} -n hive-platform
          kubectl rollout status deployment/guardian-agent -n hive-platform

      - name: Run smoke tests
        run: |
          GUARDIAN_URL=$(kubectl get service guardian-agent-external -n hive-platform -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f https://${GUARDIAN_URL}/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Guardian Agent deployed to production: ${{ github.sha }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
