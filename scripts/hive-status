#!/bin/bash
#
# hive-status - Show status of the Hive message bus and agents
# Usage: hive-status [options]
#

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
BUS_DIR="$PROJECT_DIR/bus"

# Default values
AGENT=""
DETAILED=false
WATCH_MODE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Show usage
show_usage() {
    cat << EOF
Hive Message Bus - Status Dashboard

Usage: $0 [options]

Options:
  --agent <agent>     Show status for specific agent only
  --detailed          Show detailed message information
  --watch             Watch mode - refresh every 2 seconds
  --json              Output in JSON format
  --help              Show this help

Examples:
  $0                  Show overall status
  $0 --agent frontend Show frontend agent status only
  $0 --detailed       Show detailed message breakdown
  $0 --watch          Watch status in real-time

Agents: queen, frontend, backend, infra
EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --agent)
            AGENT="$2"
            shift 2
            ;;
        --detailed)
            DETAILED=true
            shift
            ;;
        --watch)
            WATCH_MODE=true
            shift
            ;;
        --json)
            OUTPUT_FORMAT="json"
            shift
            ;;
        --help|-h)
            show_usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate agent if specified
if [[ -n "$AGENT" ]]; then
    VALID_AGENTS=("queen" "frontend" "backend" "infra")
    if [[ ! " ${VALID_AGENTS[*]} " =~ " $AGENT " ]]; then
        echo "Invalid agent: $AGENT. Valid agents: ${VALID_AGENTS[*]}"
        exit 1
    fi
fi

# Get message count for an agent
get_message_count() {
    local agent="$1"
    local filter="$2"
    local inbox_file="$BUS_DIR/$agent/inbox.jsonl"
    
    if [[ ! -f "$inbox_file" ]]; then
        echo "0"
        return
    fi
    
    case "$filter" in
        "total")
            cat "$inbox_file" 2>/dev/null | wc -l || echo "0"
            ;;
        "unread")
            cat "$inbox_file" 2>/dev/null | jq -c 'select(.read == false)' | wc -l || echo "0"
            ;;
        "high_priority")
            cat "$inbox_file" 2>/dev/null | jq -c 'select(.priority == "high" or .priority == "critical")' | wc -l || echo "0"
            ;;
        "recent")
            local one_hour_ago=$(date -u -d '1 hour ago' '+%Y-%m-%dT%H:%M:%S')
            cat "$inbox_file" 2>/dev/null | jq -c "select(.timestamp >= \"${one_hour_ago}\")" | wc -l || echo "0"
            ;;
        *)
            echo "0"
            ;;
    esac
}

# Get agent status 
get_agent_status() {
    local agent="$1"
    
    local total=$(get_message_count "$agent" "total")
    local unread=$(get_message_count "$agent" "unread")
    local high_priority=$(get_message_count "$agent" "high_priority")
    local recent=$(get_message_count "$agent" "recent")
    
    # Determine status color
    local status_color="$GREEN"
    local status_text="READY"
    
    if [[ $high_priority -gt 0 ]]; then
        status_color="$RED"
        status_text="URGENT"
    elif [[ $unread -gt 10 ]]; then
        status_color="$YELLOW"
        status_text="BUSY"
    elif [[ $unread -gt 0 ]]; then
        status_color="$CYAN"
        status_text="ACTIVE"
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        cat << EOF
{
    "agent": "$agent",
    "status": "$status_text",
    "messages": {
        "total": $total,
        "unread": $unread,
        "high_priority": $high_priority,
        "recent_1h": $recent
    }
}
EOF
    else
        printf "%-12s %s%-8s%s | Total: %3d | Unread: %3d | Priority: %3d | Recent: %3d\n" \
               "$agent" "$status_color" "$status_text" "$NC" "$total" "$unread" "$high_priority" "$recent"
    fi
}

# Get detailed message breakdown
get_detailed_breakdown() {
    local agent="$1"
    local inbox_file="$BUS_DIR/$agent/inbox.jsonl"
    
    if [[ ! -f "$inbox_file" ]]; then
        echo "  No messages found"
        return
    fi
    
    echo "  Recent Messages:"
    
    # Get last 5 messages
    tail -n 5 "$inbox_file" 2>/dev/null | while IFS= read -r message; do
        if [[ -n "$message" ]]; then
            local id=$(echo "$message" | jq -r '.id' | cut -c1-12)
            local from=$(echo "$message" | jq -r '.from')
            local topic=$(echo "$message" | jq -r '.topic')
            local priority=$(echo "$message" | jq -r '.priority')
            local read_status=$(echo "$message" | jq -r '.read')
            local timestamp=$(echo "$message" | jq -r '.timestamp')
            local msg_preview=$(echo "$message" | jq -r '.message' | head -c 50 | tr '\n' ' ')
            
            # Format timestamp
            local human_time=$(date -d "$timestamp" '+%m/%d %H:%M' 2>/dev/null || echo "${timestamp:0:16}")
            
            # Color based on read status and priority
            local msg_color="$NC"
            if [[ "$read_status" == "false" ]]; then
                case "$priority" in
                    "critical") msg_color="$RED" ;;
                    "high") msg_color="$YELLOW" ;;
                    *) msg_color="$CYAN" ;;
                esac
            fi
            
            printf "    %s%s%s | %s | %sâ†’%s | %s | %s...\n" \
                   "$msg_color" "$id" "$NC" "$human_time" "$from" "$agent" "$topic" "$msg_preview"
        fi
    done
}

# Display fleet overview
show_fleet_overview() {
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "{"
        echo "  \"timestamp\": \"$(date -u '+%Y-%m-%dT%H:%M:%S.%3NZ')\","
        echo "  \"agents\": ["
        
        local agents=("queen" "frontend" "backend" "infra")
        for i in "${!agents[@]}"; do
            get_agent_status "${agents[$i]}"
            if [[ $i -lt $((${#agents[@]} - 1)) ]]; then
                echo ","
            fi
        done
        
        echo "  ]"
        echo "}"
    else
        echo -e "${BLUE}ðŸš€ Fleet Command Message Bus Status${NC}"
        echo -e "${BLUE}$(date)${NC}"
        echo ""
        
        # Overall system stats
        local total_messages=$(find "$BUS_DIR" -name "inbox.jsonl" -exec cat {} \; 2>/dev/null | wc -l || echo "0")
        local global_unread=$(find "$BUS_DIR" -name "inbox.jsonl" -exec cat {} \; 2>/dev/null | jq -c 'select(.read == false)' | wc -l || echo "0")
        
        echo -e "${PURPLE}System Overview:${NC}"
        echo "  Total Messages: $total_messages"
        echo "  Unread Messages: $global_unread"
        echo "  Bus Directory: $BUS_DIR"
        echo ""
        
        echo -e "${PURPLE}Agent Status:${NC}"
        printf "%-12s %-10s | %-5s | %-5s | %-8s | %-6s\n" "AGENT" "STATUS" "TOTAL" "UNREAD" "PRIORITY" "RECENT"
        echo "--------------------------------------------------------------------------"
        
        local agents=("queen" "frontend" "backend" "infra")
        for agent in "${agents[@]}"; do
            get_agent_status "$agent"
        done
        
        if [[ "$DETAILED" == true ]]; then
            echo ""
            echo -e "${PURPLE}Detailed Breakdown:${NC}"
            for agent in "${agents[@]}"; do
                echo ""
                echo -e "${CYAN}$agent:${NC}"
                get_detailed_breakdown "$agent"
            done
        fi
    fi
}

# Show specific agent status
show_agent_status() {
    local agent="$1"
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        get_agent_status "$agent"
    else
        echo -e "${BLUE}ðŸ¤– Agent Status: $agent${NC}"
        echo -e "${BLUE}$(date)${NC}"
        echo ""
        
        get_agent_status "$agent"
        
        if [[ "$DETAILED" == true ]]; then
            echo ""
            echo -e "${CYAN}Message Details:${NC}"
            get_detailed_breakdown "$agent"
        fi
    fi
}

# Main display function
show_status() {
    # Clear screen if in watch mode (except first run)
    if [[ "$WATCH_MODE" == true && -n "$WATCH_COUNTER" ]]; then
        clear
    fi
    
    if [[ -n "$AGENT" ]]; then
        show_agent_status "$AGENT"
    else
        show_fleet_overview
    fi
}

# Main execution
if [[ "$WATCH_MODE" == true ]]; then
    # Watch mode - refresh every 2 seconds
    WATCH_COUNTER=0
    echo "Press Ctrl+C to exit watch mode..."
    echo ""
    
    trap 'echo -e "\n${YELLOW}Watch mode terminated${NC}"; exit 0' INT
    
    while true; do
        show_status
        WATCH_COUNTER=$((WATCH_COUNTER + 1))
        
        if [[ "$OUTPUT_FORMAT" != "json" ]]; then
            echo ""
            echo -e "${BLUE}Refreshing in 2 seconds... (Press Ctrl+C to exit)${NC}"
        fi
        
        sleep 2
    done
else
    # Single run
    show_status
fi